// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Dir_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Dir_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Dir_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Dir_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Dir_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Dir_5fmessage_2eproto;
namespace myRPC {
namespace DirServer {
class Login_Request;
class Login_RequestDefaultTypeInternal;
extern Login_RequestDefaultTypeInternal _Login_Request_default_instance_;
class Login_Response;
class Login_ResponseDefaultTypeInternal;
extern Login_ResponseDefaultTypeInternal _Login_Response_default_instance_;
class Logout_Request;
class Logout_RequestDefaultTypeInternal;
extern Logout_RequestDefaultTypeInternal _Logout_Request_default_instance_;
class Logout_Response;
class Logout_ResponseDefaultTypeInternal;
extern Logout_ResponseDefaultTypeInternal _Logout_Response_default_instance_;
class ServerInfo_Request;
class ServerInfo_RequestDefaultTypeInternal;
extern ServerInfo_RequestDefaultTypeInternal _ServerInfo_Request_default_instance_;
class ServerInfo_Response;
class ServerInfo_ResponseDefaultTypeInternal;
extern ServerInfo_ResponseDefaultTypeInternal _ServerInfo_Response_default_instance_;
class ServiceInfo;
class ServiceInfoDefaultTypeInternal;
extern ServiceInfoDefaultTypeInternal _ServiceInfo_default_instance_;
}  // namespace DirServer
}  // namespace myRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::myRPC::DirServer::Login_Request* Arena::CreateMaybeMessage<::myRPC::DirServer::Login_Request>(Arena*);
template<> ::myRPC::DirServer::Login_Response* Arena::CreateMaybeMessage<::myRPC::DirServer::Login_Response>(Arena*);
template<> ::myRPC::DirServer::Logout_Request* Arena::CreateMaybeMessage<::myRPC::DirServer::Logout_Request>(Arena*);
template<> ::myRPC::DirServer::Logout_Response* Arena::CreateMaybeMessage<::myRPC::DirServer::Logout_Response>(Arena*);
template<> ::myRPC::DirServer::ServerInfo_Request* Arena::CreateMaybeMessage<::myRPC::DirServer::ServerInfo_Request>(Arena*);
template<> ::myRPC::DirServer::ServerInfo_Response* Arena::CreateMaybeMessage<::myRPC::DirServer::ServerInfo_Response>(Arena*);
template<> ::myRPC::DirServer::ServiceInfo* Arena::CreateMaybeMessage<::myRPC::DirServer::ServiceInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myRPC {
namespace DirServer {

// ===================================================================

class Login_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.Login_Request) */ {
 public:
  inline Login_Request() : Login_Request(nullptr) {}
  virtual ~Login_Request();

  Login_Request(const Login_Request& from);
  Login_Request(Login_Request&& from) noexcept
    : Login_Request() {
    *this = ::std::move(from);
  }

  inline Login_Request& operator=(const Login_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Request& operator=(Login_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_Request& default_instance();

  static inline const Login_Request* internal_default_instance() {
    return reinterpret_cast<const Login_Request*>(
               &_Login_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Login_Request& a, Login_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_Request* New() const final {
    return CreateMaybeMessage<Login_Request>(nullptr);
  }

  Login_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_Request& from);
  void MergeFrom(const Login_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.Login_Request";
  }
  protected:
  explicit Login_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.Login_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Login_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.Login_Response) */ {
 public:
  inline Login_Response() : Login_Response(nullptr) {}
  virtual ~Login_Response();

  Login_Response(const Login_Response& from);
  Login_Response(Login_Response&& from) noexcept
    : Login_Response() {
    *this = ::std::move(from);
  }

  inline Login_Response& operator=(const Login_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Login_Response& operator=(Login_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Login_Response& default_instance();

  static inline const Login_Response* internal_default_instance() {
    return reinterpret_cast<const Login_Response*>(
               &_Login_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Login_Response& a, Login_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Login_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Login_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Login_Response* New() const final {
    return CreateMaybeMessage<Login_Response>(nullptr);
  }

  Login_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Login_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Login_Response& from);
  void MergeFrom(const Login_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Login_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.Login_Response";
  }
  protected:
  explicit Login_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.Login_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Logout_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.Logout_Request) */ {
 public:
  inline Logout_Request() : Logout_Request(nullptr) {}
  virtual ~Logout_Request();

  Logout_Request(const Logout_Request& from);
  Logout_Request(Logout_Request&& from) noexcept
    : Logout_Request() {
    *this = ::std::move(from);
  }

  inline Logout_Request& operator=(const Logout_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout_Request& operator=(Logout_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logout_Request& default_instance();

  static inline const Logout_Request* internal_default_instance() {
    return reinterpret_cast<const Logout_Request*>(
               &_Logout_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Logout_Request& a, Logout_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logout_Request* New() const final {
    return CreateMaybeMessage<Logout_Request>(nullptr);
  }

  Logout_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logout_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logout_Request& from);
  void MergeFrom(const Logout_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logout_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.Logout_Request";
  }
  protected:
  explicit Logout_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 1,
    kPortFieldNumber = 2,
  };
  // string ip = 1;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 2;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.Logout_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Logout_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.Logout_Response) */ {
 public:
  inline Logout_Response() : Logout_Response(nullptr) {}
  virtual ~Logout_Response();

  Logout_Response(const Logout_Response& from);
  Logout_Response(Logout_Response&& from) noexcept
    : Logout_Response() {
    *this = ::std::move(from);
  }

  inline Logout_Response& operator=(const Logout_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Logout_Response& operator=(Logout_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Logout_Response& default_instance();

  static inline const Logout_Response* internal_default_instance() {
    return reinterpret_cast<const Logout_Response*>(
               &_Logout_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Logout_Response& a, Logout_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Logout_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Logout_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Logout_Response* New() const final {
    return CreateMaybeMessage<Logout_Response>(nullptr);
  }

  Logout_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Logout_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Logout_Response& from);
  void MergeFrom(const Logout_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Logout_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.Logout_Response";
  }
  protected:
  explicit Logout_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.Logout_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ServiceInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.ServiceInfo) */ {
 public:
  inline ServiceInfo() : ServiceInfo(nullptr) {}
  virtual ~ServiceInfo();

  ServiceInfo(const ServiceInfo& from);
  ServiceInfo(ServiceInfo&& from) noexcept
    : ServiceInfo() {
    *this = ::std::move(from);
  }

  inline ServiceInfo& operator=(const ServiceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceInfo& operator=(ServiceInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceInfo& default_instance();

  static inline const ServiceInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceInfo*>(
               &_ServiceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ServiceInfo& a, ServiceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceInfo* New() const final {
    return CreateMaybeMessage<ServiceInfo>(nullptr);
  }

  ServiceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceInfo& from);
  void MergeFrom(const ServiceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.ServiceInfo";
  }
  protected:
  explicit ServiceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIDFieldNumber = 1,
    kIpFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string Server_ID = 1;
  void clear_server_id();
  const std::string& server_id() const;
  void set_server_id(const std::string& value);
  void set_server_id(std::string&& value);
  void set_server_id(const char* value);
  void set_server_id(const char* value, size_t size);
  std::string* mutable_server_id();
  std::string* release_server_id();
  void set_allocated_server_id(std::string* server_id);
  private:
  const std::string& _internal_server_id() const;
  void _internal_set_server_id(const std::string& value);
  std::string* _internal_mutable_server_id();
  public:

  // string ip = 2;
  void clear_ip();
  const std::string& ip() const;
  void set_ip(const std::string& value);
  void set_ip(std::string&& value);
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  std::string* mutable_ip();
  std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // string port = 3;
  void clear_port();
  const std::string& port() const;
  void set_port(const std::string& value);
  void set_port(std::string&& value);
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  std::string* mutable_port();
  std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.ServiceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.ServerInfo_Response) */ {
 public:
  inline ServerInfo_Response() : ServerInfo_Response(nullptr) {}
  virtual ~ServerInfo_Response();

  ServerInfo_Response(const ServerInfo_Response& from);
  ServerInfo_Response(ServerInfo_Response&& from) noexcept
    : ServerInfo_Response() {
    *this = ::std::move(from);
  }

  inline ServerInfo_Response& operator=(const ServerInfo_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo_Response& operator=(ServerInfo_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo_Response& default_instance();

  static inline const ServerInfo_Response* internal_default_instance() {
    return reinterpret_cast<const ServerInfo_Response*>(
               &_ServerInfo_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ServerInfo_Response& a, ServerInfo_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo_Response* New() const final {
    return CreateMaybeMessage<ServerInfo_Response>(nullptr);
  }

  ServerInfo_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo_Response& from);
  void MergeFrom(const ServerInfo_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.ServerInfo_Response";
  }
  protected:
  explicit ServerInfo_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerListFieldNumber = 1,
  };
  // repeated .myRPC.DirServer.ServiceInfo server_list = 1;
  int server_list_size() const;
  private:
  int _internal_server_list_size() const;
  public:
  void clear_server_list();
  ::myRPC::DirServer::ServiceInfo* mutable_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myRPC::DirServer::ServiceInfo >*
      mutable_server_list();
  private:
  const ::myRPC::DirServer::ServiceInfo& _internal_server_list(int index) const;
  ::myRPC::DirServer::ServiceInfo* _internal_add_server_list();
  public:
  const ::myRPC::DirServer::ServiceInfo& server_list(int index) const;
  ::myRPC::DirServer::ServiceInfo* add_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myRPC::DirServer::ServiceInfo >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.ServerInfo_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myRPC::DirServer::ServiceInfo > server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.DirServer.ServerInfo_Request) */ {
 public:
  inline ServerInfo_Request() : ServerInfo_Request(nullptr) {}
  virtual ~ServerInfo_Request();

  ServerInfo_Request(const ServerInfo_Request& from);
  ServerInfo_Request(ServerInfo_Request&& from) noexcept
    : ServerInfo_Request() {
    *this = ::std::move(from);
  }

  inline ServerInfo_Request& operator=(const ServerInfo_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo_Request& operator=(ServerInfo_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerInfo_Request& default_instance();

  static inline const ServerInfo_Request* internal_default_instance() {
    return reinterpret_cast<const ServerInfo_Request*>(
               &_ServerInfo_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ServerInfo_Request& a, ServerInfo_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo_Request* New() const final {
    return CreateMaybeMessage<ServerInfo_Request>(nullptr);
  }

  ServerInfo_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo_Request& from);
  void MergeFrom(const ServerInfo_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.DirServer.ServerInfo_Request";
  }
  protected:
  explicit ServerInfo_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Dir_5fmessage_2eproto);
    return ::descriptor_table_Dir_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myRPC.DirServer.ServerInfo_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Dir_5fmessage_2eproto;
};
// ===================================================================

class LoginServer_Stub;

class LoginServer : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline LoginServer() {};
 public:
  virtual ~LoginServer();

  typedef LoginServer_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::Login_Request* request,
                       ::myRPC::DirServer::Login_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::Logout_Request* request,
                       ::myRPC::DirServer::Logout_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::ServerInfo_Request* request,
                       ::myRPC::DirServer::ServerInfo_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginServer);
};

class LoginServer_Stub : public LoginServer {
 public:
  LoginServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  LoginServer_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~LoginServer_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements LoginServer ------------------------------------------

  void Login(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::Login_Request* request,
                       ::myRPC::DirServer::Login_Response* response,
                       ::google::protobuf::Closure* done);
  void Logout(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::Logout_Request* request,
                       ::myRPC::DirServer::Logout_Response* response,
                       ::google::protobuf::Closure* done);
  void ServerInfo(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::DirServer::ServerInfo_Request* request,
                       ::myRPC::DirServer::ServerInfo_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(LoginServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Login_Request

// string ip = 1;
inline void Login_Request::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Login_Request::ip() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Login_Request.ip)
  return _internal_ip();
}
inline void Login_Request::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Login_Request.ip)
}
inline std::string* Login_Request::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.Login_Request.ip)
  return _internal_mutable_ip();
}
inline const std::string& Login_Request::_internal_ip() const {
  return ip_.Get();
}
inline void Login_Request::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Login_Request::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.Login_Request.ip)
}
inline void Login_Request::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.Login_Request.ip)
}
inline void Login_Request::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.Login_Request.ip)
}
inline std::string* Login_Request::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Login_Request::release_ip() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.Login_Request.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login_Request::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.Login_Request.ip)
}

// string port = 2;
inline void Login_Request::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& Login_Request::port() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Login_Request.port)
  return _internal_port();
}
inline void Login_Request::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Login_Request.port)
}
inline std::string* Login_Request::mutable_port() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.Login_Request.port)
  return _internal_mutable_port();
}
inline const std::string& Login_Request::_internal_port() const {
  return port_.Get();
}
inline void Login_Request::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Login_Request::set_port(std::string&& value) {
  
  port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.Login_Request.port)
}
inline void Login_Request::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.Login_Request.port)
}
inline void Login_Request::set_port(const char* value,
    size_t size) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.Login_Request.port)
}
inline std::string* Login_Request::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Login_Request::release_port() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.Login_Request.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Login_Request::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.Login_Request.port)
}

// -------------------------------------------------------------------

// Login_Response

// int32 flag = 1;
inline void Login_Response::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_Response::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Login_Response::flag() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Login_Response.flag)
  return _internal_flag();
}
inline void Login_Response::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void Login_Response::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Login_Response.flag)
}

// -------------------------------------------------------------------

// Logout_Request

// string ip = 1;
inline void Logout_Request::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Logout_Request::ip() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Logout_Request.ip)
  return _internal_ip();
}
inline void Logout_Request::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Logout_Request.ip)
}
inline std::string* Logout_Request::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.Logout_Request.ip)
  return _internal_mutable_ip();
}
inline const std::string& Logout_Request::_internal_ip() const {
  return ip_.Get();
}
inline void Logout_Request::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Logout_Request::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.Logout_Request.ip)
}
inline void Logout_Request::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.Logout_Request.ip)
}
inline void Logout_Request::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.Logout_Request.ip)
}
inline std::string* Logout_Request::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Logout_Request::release_ip() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.Logout_Request.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logout_Request::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.Logout_Request.ip)
}

// string port = 2;
inline void Logout_Request::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& Logout_Request::port() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Logout_Request.port)
  return _internal_port();
}
inline void Logout_Request::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Logout_Request.port)
}
inline std::string* Logout_Request::mutable_port() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.Logout_Request.port)
  return _internal_mutable_port();
}
inline const std::string& Logout_Request::_internal_port() const {
  return port_.Get();
}
inline void Logout_Request::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void Logout_Request::set_port(std::string&& value) {
  
  port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.Logout_Request.port)
}
inline void Logout_Request::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.Logout_Request.port)
}
inline void Logout_Request::set_port(const char* value,
    size_t size) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.Logout_Request.port)
}
inline std::string* Logout_Request::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* Logout_Request::release_port() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.Logout_Request.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Logout_Request::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.Logout_Request.port)
}

// -------------------------------------------------------------------

// Logout_Response

// int32 flag = 1;
inline void Logout_Response::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logout_Response::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Logout_Response::flag() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.Logout_Response.flag)
  return _internal_flag();
}
inline void Logout_Response::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void Logout_Response::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.Logout_Response.flag)
}

// -------------------------------------------------------------------

// ServiceInfo

// string Server_ID = 1;
inline void ServiceInfo::clear_server_id() {
  server_id_.ClearToEmpty();
}
inline const std::string& ServiceInfo::server_id() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.ServiceInfo.Server_ID)
  return _internal_server_id();
}
inline void ServiceInfo::set_server_id(const std::string& value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.ServiceInfo.Server_ID)
}
inline std::string* ServiceInfo::mutable_server_id() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.ServiceInfo.Server_ID)
  return _internal_mutable_server_id();
}
inline const std::string& ServiceInfo::_internal_server_id() const {
  return server_id_.Get();
}
inline void ServiceInfo::_internal_set_server_id(const std::string& value) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_server_id(std::string&& value) {
  
  server_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.ServiceInfo.Server_ID)
}
inline void ServiceInfo::set_server_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.ServiceInfo.Server_ID)
}
inline void ServiceInfo::set_server_id(const char* value,
    size_t size) {
  
  server_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.ServiceInfo.Server_ID)
}
inline std::string* ServiceInfo::_internal_mutable_server_id() {
  
  return server_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_server_id() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.ServiceInfo.Server_ID)
  return server_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_server_id(std::string* server_id) {
  if (server_id != nullptr) {
    
  } else {
    
  }
  server_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.ServiceInfo.Server_ID)
}

// string ip = 2;
inline void ServiceInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& ServiceInfo::ip() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.ServiceInfo.ip)
  return _internal_ip();
}
inline void ServiceInfo::set_ip(const std::string& value) {
  _internal_set_ip(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.ServiceInfo.ip)
}
inline std::string* ServiceInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.ServiceInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& ServiceInfo::_internal_ip() const {
  return ip_.Get();
}
inline void ServiceInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_ip(std::string&& value) {
  
  ip_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.ServiceInfo.ip)
}
inline void ServiceInfo::set_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.ServiceInfo.ip)
}
inline void ServiceInfo::set_ip(const char* value,
    size_t size) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.ServiceInfo.ip)
}
inline std::string* ServiceInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_ip() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.ServiceInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.ServiceInfo.ip)
}

// string port = 3;
inline void ServiceInfo::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& ServiceInfo::port() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.ServiceInfo.port)
  return _internal_port();
}
inline void ServiceInfo::set_port(const std::string& value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.ServiceInfo.port)
}
inline std::string* ServiceInfo::mutable_port() {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.ServiceInfo.port)
  return _internal_mutable_port();
}
inline const std::string& ServiceInfo::_internal_port() const {
  return port_.Get();
}
inline void ServiceInfo::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServiceInfo::set_port(std::string&& value) {
  
  port_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.DirServer.ServiceInfo.port)
}
inline void ServiceInfo::set_port(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.DirServer.ServiceInfo.port)
}
inline void ServiceInfo::set_port(const char* value,
    size_t size) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.DirServer.ServiceInfo.port)
}
inline std::string* ServiceInfo::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServiceInfo::release_port() {
  // @@protoc_insertion_point(field_release:myRPC.DirServer.ServiceInfo.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServiceInfo::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.DirServer.ServiceInfo.port)
}

// -------------------------------------------------------------------

// ServerInfo_Response

// repeated .myRPC.DirServer.ServiceInfo server_list = 1;
inline int ServerInfo_Response::_internal_server_list_size() const {
  return server_list_.size();
}
inline int ServerInfo_Response::server_list_size() const {
  return _internal_server_list_size();
}
inline void ServerInfo_Response::clear_server_list() {
  server_list_.Clear();
}
inline ::myRPC::DirServer::ServiceInfo* ServerInfo_Response::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:myRPC.DirServer.ServerInfo_Response.server_list)
  return server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myRPC::DirServer::ServiceInfo >*
ServerInfo_Response::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:myRPC.DirServer.ServerInfo_Response.server_list)
  return &server_list_;
}
inline const ::myRPC::DirServer::ServiceInfo& ServerInfo_Response::_internal_server_list(int index) const {
  return server_list_.Get(index);
}
inline const ::myRPC::DirServer::ServiceInfo& ServerInfo_Response::server_list(int index) const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.ServerInfo_Response.server_list)
  return _internal_server_list(index);
}
inline ::myRPC::DirServer::ServiceInfo* ServerInfo_Response::_internal_add_server_list() {
  return server_list_.Add();
}
inline ::myRPC::DirServer::ServiceInfo* ServerInfo_Response::add_server_list() {
  // @@protoc_insertion_point(field_add:myRPC.DirServer.ServerInfo_Response.server_list)
  return _internal_add_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myRPC::DirServer::ServiceInfo >&
ServerInfo_Response::server_list() const {
  // @@protoc_insertion_point(field_list:myRPC.DirServer.ServerInfo_Response.server_list)
  return server_list_;
}

// -------------------------------------------------------------------

// ServerInfo_Request

// int32 flag = 1;
inline void ServerInfo_Request::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo_Request::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo_Request::flag() const {
  // @@protoc_insertion_point(field_get:myRPC.DirServer.ServerInfo_Request.flag)
  return _internal_flag();
}
inline void ServerInfo_Request::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void ServerInfo_Request::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:myRPC.DirServer.ServerInfo_Request.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DirServer
}  // namespace myRPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Dir_5fmessage_2eproto
