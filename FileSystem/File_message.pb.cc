// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: File_message.proto

#include "File_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace myRPC {
namespace Filesystem {
class File_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<File_Request> _instance;
} _File_Request_default_instance_;
class File_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<File_Response> _instance;
} _File_Response_default_instance_;
class Dir_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Dir_Response> _instance;
} _Dir_Response_default_instance_;
class bool_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<bool_Response> _instance;
} _bool_Response_default_instance_;
}  // namespace Filesystem
}  // namespace myRPC
static void InitDefaultsscc_info_Dir_Response_File_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Filesystem::_Dir_Response_default_instance_;
    new (ptr) ::myRPC::Filesystem::Dir_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Dir_Response_File_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Dir_Response_File_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_File_Request_File_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Filesystem::_File_Request_default_instance_;
    new (ptr) ::myRPC::Filesystem::File_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_File_Request_File_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_File_Request_File_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_File_Response_File_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Filesystem::_File_Response_default_instance_;
    new (ptr) ::myRPC::Filesystem::File_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_File_Response_File_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_File_Response_File_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_bool_Response_File_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Filesystem::_bool_Response_default_instance_;
    new (ptr) ::myRPC::Filesystem::bool_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_bool_Response_File_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_bool_Response_File_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_File_5fmessage_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_File_5fmessage_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_File_5fmessage_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_File_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Request, file_name_),
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Request, file_data_),
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Request, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Response, file_name_),
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::File_Response, file_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::Dir_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::Dir_Response, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::bool_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Filesystem::bool_Response, flag_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::myRPC::Filesystem::File_Request)},
  { 8, -1, sizeof(::myRPC::Filesystem::File_Response)},
  { 15, -1, sizeof(::myRPC::Filesystem::Dir_Response)},
  { 21, -1, sizeof(::myRPC::Filesystem::bool_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Filesystem::_File_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Filesystem::_File_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Filesystem::_Dir_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Filesystem::_bool_Response_default_instance_),
};

const char descriptor_table_protodef_File_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022File_message.proto\022\020myRPC.Filesystem\"B"
  "\n\014File_Request\022\021\n\tfile_name\030\001 \001(\t\022\021\n\tfil"
  "e_data\030\002 \001(\t\022\014\n\004flag\030\003 \001(\003\"5\n\rFile_Respo"
  "nse\022\021\n\tfile_name\030\001 \001(\t\022\021\n\tfile_data\030\002 \001("
  "\t\" \n\014Dir_Response\022\020\n\010filename\030\001 \003(\t\"\035\n\rb"
  "ool_Response\022\014\n\004flag\030\001 \001(\0052\225\004\n\013File_Serv"
  "er\022D\n\002ls\022\036.myRPC.Filesystem.File_Request"
  "\032\036.myRPC.Filesystem.Dir_Response\022I\n\006uplo"
  "ad\022\036.myRPC.Filesystem.File_Request\032\037.myR"
  "PC.Filesystem.bool_Response\022K\n\010download\022"
  "\036.myRPC.Filesystem.File_Request\032\037.myRPC."
  "Filesystem.File_Response\022J\n\007ddelete\022\036.my"
  "RPC.Filesystem.File_Request\032\037.myRPC.File"
  "system.bool_Response\022H\n\005mkdir\022\036.myRPC.Fi"
  "lesystem.File_Request\032\037.myRPC.Filesystem"
  ".bool_Response\022I\n\006create\022\036.myRPC.Filesys"
  "tem.File_Request\032\037.myRPC.Filesystem.bool"
  "_Response\022G\n\004open\022\036.myRPC.Filesystem.Fil"
  "e_Request\032\037.myRPC.Filesystem.File_Respon"
  "seB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_File_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_File_5fmessage_2eproto_sccs[4] = {
  &scc_info_Dir_Response_File_5fmessage_2eproto.base,
  &scc_info_File_Request_File_5fmessage_2eproto.base,
  &scc_info_File_Response_File_5fmessage_2eproto.base,
  &scc_info_bool_Response_File_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_File_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_File_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_File_5fmessage_2eproto, "File_message.proto", 775,
  &descriptor_table_File_5fmessage_2eproto_once, descriptor_table_File_5fmessage_2eproto_sccs, descriptor_table_File_5fmessage_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_File_5fmessage_2eproto::offsets,
  file_level_metadata_File_5fmessage_2eproto, 4, file_level_enum_descriptors_File_5fmessage_2eproto, file_level_service_descriptors_File_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_File_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_File_5fmessage_2eproto)), true);
namespace myRPC {
namespace Filesystem {

// ===================================================================

class File_Request::_Internal {
 public:
};

File_Request::File_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Filesystem.File_Request)
}
File_Request::File_Request(const File_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_data().empty()) {
    file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_data(), 
      GetArena());
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:myRPC.Filesystem.File_Request)
}

void File_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_File_Request_File_5fmessage_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  flag_ = PROTOBUF_LONGLONG(0);
}

File_Request::~File_Request() {
  // @@protoc_insertion_point(destructor:myRPC.Filesystem.File_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void File_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void File_Request::ArenaDtor(void* object) {
  File_Request* _this = reinterpret_cast< File_Request* >(object);
  (void)_this;
}
void File_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const File_Request& File_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_File_Request_File_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void File_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Filesystem.File_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  file_data_.ClearToEmpty();
  flag_ = PROTOBUF_LONGLONG(0);
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Filesystem.File_Request.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Filesystem.File_Request.file_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 flag = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Filesystem.File_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Filesystem.File_Request.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // string file_data = 2;
  if (this->file_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_data().data(), static_cast<int>(this->_internal_file_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Filesystem.File_Request.file_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_data(), target);
  }

  // int64 flag = 3;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Filesystem.File_Request)
  return target;
}

size_t File_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Filesystem.File_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_data = 2;
  if (this->file_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_data());
  }

  // int64 flag = 3;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Filesystem.File_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const File_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<File_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Filesystem.File_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Filesystem.File_Request)
    MergeFrom(*source);
  }
}

void File_Request::MergeFrom(const File_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Filesystem.File_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.file_data().size() > 0) {
    _internal_set_file_data(from._internal_file_data());
  }
  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void File_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Filesystem.File_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File_Request::CopyFrom(const File_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Filesystem.File_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File_Request::IsInitialized() const {
  return true;
}

void File_Request::InternalSwap(File_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_data_.Swap(&other->file_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata File_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class File_Response::_Internal {
 public:
};

File_Response::File_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Filesystem.File_Response)
}
File_Response::File_Response(const File_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_name().empty()) {
    file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_name(), 
      GetArena());
  }
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_file_data().empty()) {
    file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_file_data(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:myRPC.Filesystem.File_Response)
}

void File_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_File_Response_File_5fmessage_2eproto.base);
  file_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

File_Response::~File_Response() {
  // @@protoc_insertion_point(destructor:myRPC.Filesystem.File_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void File_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  file_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  file_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void File_Response::ArenaDtor(void* object) {
  File_Response* _this = reinterpret_cast< File_Response* >(object);
  (void)_this;
}
void File_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void File_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const File_Response& File_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_File_Response_File_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void File_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Filesystem.File_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  file_name_.ClearToEmpty();
  file_data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string file_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_file_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Filesystem.File_Response.file_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string file_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_file_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Filesystem.File_Response.file_data"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* File_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Filesystem.File_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_name().data(), static_cast<int>(this->_internal_file_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Filesystem.File_Response.file_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_file_name(), target);
  }

  // string file_data = 2;
  if (this->file_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_file_data().data(), static_cast<int>(this->_internal_file_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Filesystem.File_Response.file_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_file_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Filesystem.File_Response)
  return target;
}

size_t File_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Filesystem.File_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string file_name = 1;
  if (this->file_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_name());
  }

  // string file_data = 2;
  if (this->file_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_file_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void File_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Filesystem.File_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const File_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<File_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Filesystem.File_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Filesystem.File_Response)
    MergeFrom(*source);
  }
}

void File_Response::MergeFrom(const File_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Filesystem.File_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.file_name().size() > 0) {
    _internal_set_file_name(from._internal_file_name());
  }
  if (from.file_data().size() > 0) {
    _internal_set_file_data(from._internal_file_data());
  }
}

void File_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Filesystem.File_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void File_Response::CopyFrom(const File_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Filesystem.File_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File_Response::IsInitialized() const {
  return true;
}

void File_Response::InternalSwap(File_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  file_name_.Swap(&other->file_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  file_data_.Swap(&other->file_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata File_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class Dir_Response::_Internal {
 public:
};

Dir_Response::Dir_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  filename_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Filesystem.Dir_Response)
}
Dir_Response::Dir_Response(const Dir_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filename_(from.filename_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:myRPC.Filesystem.Dir_Response)
}

void Dir_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Dir_Response_File_5fmessage_2eproto.base);
}

Dir_Response::~Dir_Response() {
  // @@protoc_insertion_point(destructor:myRPC.Filesystem.Dir_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Dir_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Dir_Response::ArenaDtor(void* object) {
  Dir_Response* _this = reinterpret_cast< Dir_Response* >(object);
  (void)_this;
}
void Dir_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dir_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Dir_Response& Dir_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Dir_Response_File_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Dir_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Filesystem.Dir_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dir_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filename();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Filesystem.Dir_Response.filename"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Dir_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Filesystem.Dir_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated string filename = 1;
  for (int i = 0, n = this->_internal_filename_size(); i < n; i++) {
    const auto& s = this->_internal_filename(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Filesystem.Dir_Response.filename");
    target = stream->WriteString(1, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Filesystem.Dir_Response)
  return target;
}

size_t Dir_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Filesystem.Dir_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filename = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filename_.size());
  for (int i = 0, n = filename_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filename_.Get(i));
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Dir_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Filesystem.Dir_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Dir_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Dir_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Filesystem.Dir_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Filesystem.Dir_Response)
    MergeFrom(*source);
  }
}

void Dir_Response::MergeFrom(const Dir_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Filesystem.Dir_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  filename_.MergeFrom(from.filename_);
}

void Dir_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Filesystem.Dir_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Dir_Response::CopyFrom(const Dir_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Filesystem.Dir_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dir_Response::IsInitialized() const {
  return true;
}

void Dir_Response::InternalSwap(Dir_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.InternalSwap(&other->filename_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dir_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class bool_Response::_Internal {
 public:
};

bool_Response::bool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Filesystem.bool_Response)
}
bool_Response::bool_Response(const bool_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:myRPC.Filesystem.bool_Response)
}

void bool_Response::SharedCtor() {
  flag_ = 0;
}

bool_Response::~bool_Response() {
  // @@protoc_insertion_point(destructor:myRPC.Filesystem.bool_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void bool_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void bool_Response::ArenaDtor(void* object) {
  bool_Response* _this = reinterpret_cast< bool_Response* >(object);
  (void)_this;
}
void bool_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void bool_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const bool_Response& bool_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_bool_Response_File_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void bool_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Filesystem.bool_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* bool_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* bool_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Filesystem.bool_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Filesystem.bool_Response)
  return target;
}

size_t bool_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Filesystem.bool_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void bool_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Filesystem.bool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const bool_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<bool_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Filesystem.bool_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Filesystem.bool_Response)
    MergeFrom(*source);
  }
}

void bool_Response::MergeFrom(const bool_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Filesystem.bool_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void bool_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Filesystem.bool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void bool_Response::CopyFrom(const bool_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Filesystem.bool_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool bool_Response::IsInitialized() const {
  return true;
}

void bool_Response::InternalSwap(bool_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata bool_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

File_Server::~File_Server() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* File_Server::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_File_5fmessage_2eproto);
  return file_level_service_descriptors_File_5fmessage_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* File_Server::GetDescriptor() {
  return descriptor();
}

void File_Server::ls(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::Dir_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ls() not implemented.");
  done->Run();
}

void File_Server::upload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::bool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method upload() not implemented.");
  done->Run();
}

void File_Server::download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::File_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method download() not implemented.");
  done->Run();
}

void File_Server::ddelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::bool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method ddelete() not implemented.");
  done->Run();
}

void File_Server::mkdir(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::bool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method mkdir() not implemented.");
  done->Run();
}

void File_Server::create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::bool_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method create() not implemented.");
  done->Run();
}

void File_Server::open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Filesystem::File_Request*,
                         ::myRPC::Filesystem::File_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method open() not implemented.");
  done->Run();
}

void File_Server::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_File_5fmessage_2eproto[0]);
  switch(method->index()) {
    case 0:
      ls(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::Dir_Response*>(
                 response),
             done);
      break;
    case 1:
      upload(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::bool_Response*>(
                 response),
             done);
      break;
    case 2:
      download(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::File_Response*>(
                 response),
             done);
      break;
    case 3:
      ddelete(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::bool_Response*>(
                 response),
             done);
      break;
    case 4:
      mkdir(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::bool_Response*>(
                 response),
             done);
      break;
    case 5:
      create(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::bool_Response*>(
                 response),
             done);
      break;
    case 6:
      open(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Filesystem::File_Request*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Filesystem::File_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& File_Server::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 1:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 2:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 3:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 4:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 5:
      return ::myRPC::Filesystem::File_Request::default_instance();
    case 6:
      return ::myRPC::Filesystem::File_Request::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& File_Server::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myRPC::Filesystem::Dir_Response::default_instance();
    case 1:
      return ::myRPC::Filesystem::bool_Response::default_instance();
    case 2:
      return ::myRPC::Filesystem::File_Response::default_instance();
    case 3:
      return ::myRPC::Filesystem::bool_Response::default_instance();
    case 4:
      return ::myRPC::Filesystem::bool_Response::default_instance();
    case 5:
      return ::myRPC::Filesystem::bool_Response::default_instance();
    case 6:
      return ::myRPC::Filesystem::File_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

File_Server_Stub::File_Server_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
File_Server_Stub::File_Server_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
File_Server_Stub::~File_Server_Stub() {
  if (owns_channel_) delete channel_;
}

void File_Server_Stub::ls(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::Dir_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void File_Server_Stub::upload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::bool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void File_Server_Stub::download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::File_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void File_Server_Stub::ddelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::bool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void File_Server_Stub::mkdir(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::bool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void File_Server_Stub::create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::bool_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void File_Server_Stub::open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Filesystem::File_Request* request,
                              ::myRPC::Filesystem::File_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Filesystem
}  // namespace myRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myRPC::Filesystem::File_Request* Arena::CreateMaybeMessage< ::myRPC::Filesystem::File_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Filesystem::File_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::myRPC::Filesystem::File_Response* Arena::CreateMaybeMessage< ::myRPC::Filesystem::File_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Filesystem::File_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::myRPC::Filesystem::Dir_Response* Arena::CreateMaybeMessage< ::myRPC::Filesystem::Dir_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Filesystem::Dir_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::myRPC::Filesystem::bool_Response* Arena::CreateMaybeMessage< ::myRPC::Filesystem::bool_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Filesystem::bool_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
