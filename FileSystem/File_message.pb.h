// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: File_message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_File_5fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_File_5fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_File_5fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_File_5fmessage_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_File_5fmessage_2eproto;
namespace myRPC {
namespace Filesystem {
class Dir_Response;
class Dir_ResponseDefaultTypeInternal;
extern Dir_ResponseDefaultTypeInternal _Dir_Response_default_instance_;
class File_Request;
class File_RequestDefaultTypeInternal;
extern File_RequestDefaultTypeInternal _File_Request_default_instance_;
class File_Response;
class File_ResponseDefaultTypeInternal;
extern File_ResponseDefaultTypeInternal _File_Response_default_instance_;
class bool_Response;
class bool_ResponseDefaultTypeInternal;
extern bool_ResponseDefaultTypeInternal _bool_Response_default_instance_;
}  // namespace Filesystem
}  // namespace myRPC
PROTOBUF_NAMESPACE_OPEN
template<> ::myRPC::Filesystem::Dir_Response* Arena::CreateMaybeMessage<::myRPC::Filesystem::Dir_Response>(Arena*);
template<> ::myRPC::Filesystem::File_Request* Arena::CreateMaybeMessage<::myRPC::Filesystem::File_Request>(Arena*);
template<> ::myRPC::Filesystem::File_Response* Arena::CreateMaybeMessage<::myRPC::Filesystem::File_Response>(Arena*);
template<> ::myRPC::Filesystem::bool_Response* Arena::CreateMaybeMessage<::myRPC::Filesystem::bool_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myRPC {
namespace Filesystem {

// ===================================================================

class File_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.Filesystem.File_Request) */ {
 public:
  inline File_Request() : File_Request(nullptr) {}
  virtual ~File_Request();

  File_Request(const File_Request& from);
  File_Request(File_Request&& from) noexcept
    : File_Request() {
    *this = ::std::move(from);
  }

  inline File_Request& operator=(const File_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline File_Request& operator=(File_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File_Request& default_instance();

  static inline const File_Request* internal_default_instance() {
    return reinterpret_cast<const File_Request*>(
               &_File_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(File_Request& a, File_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(File_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File_Request* New() const final {
    return CreateMaybeMessage<File_Request>(nullptr);
  }

  File_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File_Request& from);
  void MergeFrom(const File_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.Filesystem.File_Request";
  }
  protected:
  explicit File_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_File_5fmessage_2eproto);
    return ::descriptor_table_File_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileDataFieldNumber = 2,
    kFlagFieldNumber = 3,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_data = 2;
  void clear_file_data();
  const std::string& file_data() const;
  void set_file_data(const std::string& value);
  void set_file_data(std::string&& value);
  void set_file_data(const char* value);
  void set_file_data(const char* value, size_t size);
  std::string* mutable_file_data();
  std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // int64 flag = 3;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int64 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:myRPC.Filesystem.File_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
  ::PROTOBUF_NAMESPACE_ID::int64 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class File_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.Filesystem.File_Response) */ {
 public:
  inline File_Response() : File_Response(nullptr) {}
  virtual ~File_Response();

  File_Response(const File_Response& from);
  File_Response(File_Response&& from) noexcept
    : File_Response() {
    *this = ::std::move(from);
  }

  inline File_Response& operator=(const File_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline File_Response& operator=(File_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const File_Response& default_instance();

  static inline const File_Response* internal_default_instance() {
    return reinterpret_cast<const File_Response*>(
               &_File_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(File_Response& a, File_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(File_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(File_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline File_Response* New() const final {
    return CreateMaybeMessage<File_Response>(nullptr);
  }

  File_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<File_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const File_Response& from);
  void MergeFrom(const File_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(File_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.Filesystem.File_Response";
  }
  protected:
  explicit File_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_File_5fmessage_2eproto);
    return ::descriptor_table_File_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFileNameFieldNumber = 1,
    kFileDataFieldNumber = 2,
  };
  // string file_name = 1;
  void clear_file_name();
  const std::string& file_name() const;
  void set_file_name(const std::string& value);
  void set_file_name(std::string&& value);
  void set_file_name(const char* value);
  void set_file_name(const char* value, size_t size);
  std::string* mutable_file_name();
  std::string* release_file_name();
  void set_allocated_file_name(std::string* file_name);
  private:
  const std::string& _internal_file_name() const;
  void _internal_set_file_name(const std::string& value);
  std::string* _internal_mutable_file_name();
  public:

  // string file_data = 2;
  void clear_file_data();
  const std::string& file_data() const;
  void set_file_data(const std::string& value);
  void set_file_data(std::string&& value);
  void set_file_data(const char* value);
  void set_file_data(const char* value, size_t size);
  std::string* mutable_file_data();
  std::string* release_file_data();
  void set_allocated_file_data(std::string* file_data);
  private:
  const std::string& _internal_file_data() const;
  void _internal_set_file_data(const std::string& value);
  std::string* _internal_mutable_file_data();
  public:

  // @@protoc_insertion_point(class_scope:myRPC.Filesystem.File_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr file_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class Dir_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.Filesystem.Dir_Response) */ {
 public:
  inline Dir_Response() : Dir_Response(nullptr) {}
  virtual ~Dir_Response();

  Dir_Response(const Dir_Response& from);
  Dir_Response(Dir_Response&& from) noexcept
    : Dir_Response() {
    *this = ::std::move(from);
  }

  inline Dir_Response& operator=(const Dir_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Dir_Response& operator=(Dir_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Dir_Response& default_instance();

  static inline const Dir_Response* internal_default_instance() {
    return reinterpret_cast<const Dir_Response*>(
               &_Dir_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Dir_Response& a, Dir_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Dir_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Dir_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Dir_Response* New() const final {
    return CreateMaybeMessage<Dir_Response>(nullptr);
  }

  Dir_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Dir_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Dir_Response& from);
  void MergeFrom(const Dir_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Dir_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.Filesystem.Dir_Response";
  }
  protected:
  explicit Dir_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_File_5fmessage_2eproto);
    return ::descriptor_table_File_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFilenameFieldNumber = 1,
  };
  // repeated string filename = 1;
  int filename_size() const;
  private:
  int _internal_filename_size() const;
  public:
  void clear_filename();
  const std::string& filename(int index) const;
  std::string* mutable_filename(int index);
  void set_filename(int index, const std::string& value);
  void set_filename(int index, std::string&& value);
  void set_filename(int index, const char* value);
  void set_filename(int index, const char* value, size_t size);
  std::string* add_filename();
  void add_filename(const std::string& value);
  void add_filename(std::string&& value);
  void add_filename(const char* value);
  void add_filename(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filename() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filename();
  private:
  const std::string& _internal_filename(int index) const;
  std::string* _internal_add_filename();
  public:

  // @@protoc_insertion_point(class_scope:myRPC.Filesystem.Dir_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filename_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_5fmessage_2eproto;
};
// -------------------------------------------------------------------

class bool_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myRPC.Filesystem.bool_Response) */ {
 public:
  inline bool_Response() : bool_Response(nullptr) {}
  virtual ~bool_Response();

  bool_Response(const bool_Response& from);
  bool_Response(bool_Response&& from) noexcept
    : bool_Response() {
    *this = ::std::move(from);
  }

  inline bool_Response& operator=(const bool_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline bool_Response& operator=(bool_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const bool_Response& default_instance();

  static inline const bool_Response* internal_default_instance() {
    return reinterpret_cast<const bool_Response*>(
               &_bool_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(bool_Response& a, bool_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(bool_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(bool_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline bool_Response* New() const final {
    return CreateMaybeMessage<bool_Response>(nullptr);
  }

  bool_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<bool_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const bool_Response& from);
  void MergeFrom(const bool_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(bool_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myRPC.Filesystem.bool_Response";
  }
  protected:
  explicit bool_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_File_5fmessage_2eproto);
    return ::descriptor_table_File_5fmessage_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagFieldNumber = 1,
  };
  // int32 flag = 1;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:myRPC.Filesystem.bool_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_File_5fmessage_2eproto;
};
// ===================================================================

class File_Server_Stub;

class File_Server : public ::PROTOBUF_NAMESPACE_ID::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline File_Server() {};
 public:
  virtual ~File_Server();

  typedef File_Server_Stub Stub;

  static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* descriptor();

  virtual void ls(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::Dir_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void upload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::File_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void ddelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void mkdir(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  virtual void open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::File_Response* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                  ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                  const ::PROTOBUF_NAMESPACE_ID::Message* request,
                  ::PROTOBUF_NAMESPACE_ID::Message* response,
                  ::google::protobuf::Closure* done);
  const ::PROTOBUF_NAMESPACE_ID::Message& GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;
  const ::PROTOBUF_NAMESPACE_ID::Message& GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(File_Server);
};

class File_Server_Stub : public File_Server {
 public:
  File_Server_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel);
  File_Server_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
                   ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership);
  ~File_Server_Stub();

  inline ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel() { return channel_; }

  // implements File_Server ------------------------------------------

  void ls(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::Dir_Response* response,
                       ::google::protobuf::Closure* done);
  void upload(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  void download(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::File_Response* response,
                       ::google::protobuf::Closure* done);
  void ddelete(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  void mkdir(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  void create(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::bool_Response* response,
                       ::google::protobuf::Closure* done);
  void open(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                       const ::myRPC::Filesystem::File_Request* request,
                       ::myRPC::Filesystem::File_Response* response,
                       ::google::protobuf::Closure* done);
 private:
  ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(File_Server_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// File_Request

// string file_name = 1;
inline void File_Request::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& File_Request::file_name() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.File_Request.file_name)
  return _internal_file_name();
}
inline void File_Request::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.File_Request.file_name)
}
inline std::string* File_Request::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:myRPC.Filesystem.File_Request.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& File_Request::_internal_file_name() const {
  return file_name_.Get();
}
inline void File_Request::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void File_Request::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.Filesystem.File_Request.file_name)
}
inline void File_Request::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.Filesystem.File_Request.file_name)
}
inline void File_Request::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.Filesystem.File_Request.file_name)
}
inline std::string* File_Request::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* File_Request::release_file_name() {
  // @@protoc_insertion_point(field_release:myRPC.Filesystem.File_Request.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File_Request::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.Filesystem.File_Request.file_name)
}

// string file_data = 2;
inline void File_Request::clear_file_data() {
  file_data_.ClearToEmpty();
}
inline const std::string& File_Request::file_data() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.File_Request.file_data)
  return _internal_file_data();
}
inline void File_Request::set_file_data(const std::string& value) {
  _internal_set_file_data(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.File_Request.file_data)
}
inline std::string* File_Request::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable:myRPC.Filesystem.File_Request.file_data)
  return _internal_mutable_file_data();
}
inline const std::string& File_Request::_internal_file_data() const {
  return file_data_.Get();
}
inline void File_Request::_internal_set_file_data(const std::string& value) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void File_Request::set_file_data(std::string&& value) {
  
  file_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.Filesystem.File_Request.file_data)
}
inline void File_Request::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.Filesystem.File_Request.file_data)
}
inline void File_Request::set_file_data(const char* value,
    size_t size) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.Filesystem.File_Request.file_data)
}
inline std::string* File_Request::_internal_mutable_file_data() {
  
  return file_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* File_Request::release_file_data() {
  // @@protoc_insertion_point(field_release:myRPC.Filesystem.File_Request.file_data)
  return file_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File_Request::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    
  } else {
    
  }
  file_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.Filesystem.File_Request.file_data)
}

// int64 flag = 3;
inline void File_Request::clear_flag() {
  flag_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 File_Request::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 File_Request::flag() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.File_Request.flag)
  return _internal_flag();
}
inline void File_Request::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  flag_ = value;
}
inline void File_Request::set_flag(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.File_Request.flag)
}

// -------------------------------------------------------------------

// File_Response

// string file_name = 1;
inline void File_Response::clear_file_name() {
  file_name_.ClearToEmpty();
}
inline const std::string& File_Response::file_name() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.File_Response.file_name)
  return _internal_file_name();
}
inline void File_Response::set_file_name(const std::string& value) {
  _internal_set_file_name(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.File_Response.file_name)
}
inline std::string* File_Response::mutable_file_name() {
  // @@protoc_insertion_point(field_mutable:myRPC.Filesystem.File_Response.file_name)
  return _internal_mutable_file_name();
}
inline const std::string& File_Response::_internal_file_name() const {
  return file_name_.Get();
}
inline void File_Response::_internal_set_file_name(const std::string& value) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void File_Response::set_file_name(std::string&& value) {
  
  file_name_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.Filesystem.File_Response.file_name)
}
inline void File_Response::set_file_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.Filesystem.File_Response.file_name)
}
inline void File_Response::set_file_name(const char* value,
    size_t size) {
  
  file_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.Filesystem.File_Response.file_name)
}
inline std::string* File_Response::_internal_mutable_file_name() {
  
  return file_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* File_Response::release_file_name() {
  // @@protoc_insertion_point(field_release:myRPC.Filesystem.File_Response.file_name)
  return file_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File_Response::set_allocated_file_name(std::string* file_name) {
  if (file_name != nullptr) {
    
  } else {
    
  }
  file_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.Filesystem.File_Response.file_name)
}

// string file_data = 2;
inline void File_Response::clear_file_data() {
  file_data_.ClearToEmpty();
}
inline const std::string& File_Response::file_data() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.File_Response.file_data)
  return _internal_file_data();
}
inline void File_Response::set_file_data(const std::string& value) {
  _internal_set_file_data(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.File_Response.file_data)
}
inline std::string* File_Response::mutable_file_data() {
  // @@protoc_insertion_point(field_mutable:myRPC.Filesystem.File_Response.file_data)
  return _internal_mutable_file_data();
}
inline const std::string& File_Response::_internal_file_data() const {
  return file_data_.Get();
}
inline void File_Response::_internal_set_file_data(const std::string& value) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void File_Response::set_file_data(std::string&& value) {
  
  file_data_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:myRPC.Filesystem.File_Response.file_data)
}
inline void File_Response::set_file_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:myRPC.Filesystem.File_Response.file_data)
}
inline void File_Response::set_file_data(const char* value,
    size_t size) {
  
  file_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:myRPC.Filesystem.File_Response.file_data)
}
inline std::string* File_Response::_internal_mutable_file_data() {
  
  return file_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* File_Response::release_file_data() {
  // @@protoc_insertion_point(field_release:myRPC.Filesystem.File_Response.file_data)
  return file_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void File_Response::set_allocated_file_data(std::string* file_data) {
  if (file_data != nullptr) {
    
  } else {
    
  }
  file_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), file_data,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:myRPC.Filesystem.File_Response.file_data)
}

// -------------------------------------------------------------------

// Dir_Response

// repeated string filename = 1;
inline int Dir_Response::_internal_filename_size() const {
  return filename_.size();
}
inline int Dir_Response::filename_size() const {
  return _internal_filename_size();
}
inline void Dir_Response::clear_filename() {
  filename_.Clear();
}
inline std::string* Dir_Response::add_filename() {
  // @@protoc_insertion_point(field_add_mutable:myRPC.Filesystem.Dir_Response.filename)
  return _internal_add_filename();
}
inline const std::string& Dir_Response::_internal_filename(int index) const {
  return filename_.Get(index);
}
inline const std::string& Dir_Response::filename(int index) const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.Dir_Response.filename)
  return _internal_filename(index);
}
inline std::string* Dir_Response::mutable_filename(int index) {
  // @@protoc_insertion_point(field_mutable:myRPC.Filesystem.Dir_Response.filename)
  return filename_.Mutable(index);
}
inline void Dir_Response::set_filename(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.Dir_Response.filename)
  filename_.Mutable(index)->assign(value);
}
inline void Dir_Response::set_filename(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.Dir_Response.filename)
  filename_.Mutable(index)->assign(std::move(value));
}
inline void Dir_Response::set_filename(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filename_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:myRPC.Filesystem.Dir_Response.filename)
}
inline void Dir_Response::set_filename(int index, const char* value, size_t size) {
  filename_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:myRPC.Filesystem.Dir_Response.filename)
}
inline std::string* Dir_Response::_internal_add_filename() {
  return filename_.Add();
}
inline void Dir_Response::add_filename(const std::string& value) {
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:myRPC.Filesystem.Dir_Response.filename)
}
inline void Dir_Response::add_filename(std::string&& value) {
  filename_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:myRPC.Filesystem.Dir_Response.filename)
}
inline void Dir_Response::add_filename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filename_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:myRPC.Filesystem.Dir_Response.filename)
}
inline void Dir_Response::add_filename(const char* value, size_t size) {
  filename_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:myRPC.Filesystem.Dir_Response.filename)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Dir_Response::filename() const {
  // @@protoc_insertion_point(field_list:myRPC.Filesystem.Dir_Response.filename)
  return filename_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Dir_Response::mutable_filename() {
  // @@protoc_insertion_point(field_mutable_list:myRPC.Filesystem.Dir_Response.filename)
  return &filename_;
}

// -------------------------------------------------------------------

// bool_Response

// int32 flag = 1;
inline void bool_Response::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 bool_Response::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 bool_Response::flag() const {
  // @@protoc_insertion_point(field_get:myRPC.Filesystem.bool_Response.flag)
  return _internal_flag();
}
inline void bool_Response::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void bool_Response::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:myRPC.Filesystem.bool_Response.flag)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Filesystem
}  // namespace myRPC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_File_5fmessage_2eproto
