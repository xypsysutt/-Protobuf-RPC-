// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lock_message.proto

#include "Lock_message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
namespace myRPC {
namespace Lock {
class Lock_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Lock_Response> _instance;
} _Lock_Response_default_instance_;
class LockInfo_RequstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockInfo_Requst> _instance;
} _LockInfo_Requst_default_instance_;
class unLockInfo_RequstDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<unLockInfo_Requst> _instance;
} _unLockInfo_Requst_default_instance_;
}  // namespace Lock
}  // namespace myRPC
static void InitDefaultsscc_info_LockInfo_Requst_Lock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Lock::_LockInfo_Requst_default_instance_;
    new (ptr) ::myRPC::Lock::LockInfo_Requst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockInfo_Requst_Lock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockInfo_Requst_Lock_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_Lock_Response_Lock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Lock::_Lock_Response_default_instance_;
    new (ptr) ::myRPC::Lock::Lock_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Lock_Response_Lock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Lock_Response_Lock_5fmessage_2eproto}, {}};

static void InitDefaultsscc_info_unLockInfo_Requst_Lock_5fmessage_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::myRPC::Lock::_unLockInfo_Requst_default_instance_;
    new (ptr) ::myRPC::Lock::unLockInfo_Requst();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_unLockInfo_Requst_Lock_5fmessage_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_unLockInfo_Requst_Lock_5fmessage_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_Lock_5fmessage_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_Lock_5fmessage_2eproto = nullptr;
static const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* file_level_service_descriptors_Lock_5fmessage_2eproto[1];

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_Lock_5fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::Lock_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::Lock_Response, flag_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::LockInfo_Requst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::LockInfo_Requst, filename_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::unLockInfo_Requst, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::myRPC::Lock::unLockInfo_Requst, filename_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::myRPC::Lock::Lock_Response)},
  { 6, -1, sizeof(::myRPC::Lock::LockInfo_Requst)},
  { 12, -1, sizeof(::myRPC::Lock::unLockInfo_Requst)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Lock::_Lock_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Lock::_LockInfo_Requst_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::myRPC::Lock::_unLockInfo_Requst_default_instance_),
};

const char descriptor_table_protodef_Lock_5fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022Lock_message.proto\022\nmyRPC.Lock\"\035\n\rLock"
  "_Response\022\014\n\004flag\030\001 \001(\005\"#\n\017LockInfo_Requ"
  "st\022\020\n\010filename\030\001 \001(\t\"%\n\021unLockInfo_Requs"
  "t\022\020\n\010filename\030\001 \001(\t2\221\001\n\013Lock_Server\022>\n\004L"
  "ock\022\033.myRPC.Lock.LockInfo_Requst\032\031.myRPC"
  ".Lock.Lock_Response\022B\n\006unLock\022\035.myRPC.Lo"
  "ck.unLockInfo_Requst\032\031.myRPC.Lock.Lock_R"
  "esponseB\003\200\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_Lock_5fmessage_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_Lock_5fmessage_2eproto_sccs[3] = {
  &scc_info_LockInfo_Requst_Lock_5fmessage_2eproto.base,
  &scc_info_Lock_Response_Lock_5fmessage_2eproto.base,
  &scc_info_unLockInfo_Requst_Lock_5fmessage_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_Lock_5fmessage_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Lock_5fmessage_2eproto = {
  false, false, descriptor_table_protodef_Lock_5fmessage_2eproto, "Lock_message.proto", 300,
  &descriptor_table_Lock_5fmessage_2eproto_once, descriptor_table_Lock_5fmessage_2eproto_sccs, descriptor_table_Lock_5fmessage_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_Lock_5fmessage_2eproto::offsets,
  file_level_metadata_Lock_5fmessage_2eproto, 3, file_level_enum_descriptors_Lock_5fmessage_2eproto, file_level_service_descriptors_Lock_5fmessage_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_Lock_5fmessage_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_Lock_5fmessage_2eproto)), true);
namespace myRPC {
namespace Lock {

// ===================================================================

class Lock_Response::_Internal {
 public:
};

Lock_Response::Lock_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Lock.Lock_Response)
}
Lock_Response::Lock_Response(const Lock_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:myRPC.Lock.Lock_Response)
}

void Lock_Response::SharedCtor() {
  flag_ = 0;
}

Lock_Response::~Lock_Response() {
  // @@protoc_insertion_point(destructor:myRPC.Lock.Lock_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Lock_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Lock_Response::ArenaDtor(void* object) {
  Lock_Response* _this = reinterpret_cast< Lock_Response* >(object);
  (void)_this;
}
void Lock_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lock_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Lock_Response& Lock_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Lock_Response_Lock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void Lock_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Lock.Lock_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flag_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lock_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Lock_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Lock.Lock_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Lock.Lock_Response)
  return target;
}

size_t Lock_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Lock.Lock_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 flag = 1;
  if (this->flag() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Lock_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Lock.Lock_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Lock_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Lock_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Lock.Lock_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Lock.Lock_Response)
    MergeFrom(*source);
  }
}

void Lock_Response::MergeFrom(const Lock_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Lock.Lock_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.flag() != 0) {
    _internal_set_flag(from._internal_flag());
  }
}

void Lock_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Lock.Lock_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Lock_Response::CopyFrom(const Lock_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Lock.Lock_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lock_Response::IsInitialized() const {
  return true;
}

void Lock_Response::InternalSwap(Lock_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(flag_, other->flag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lock_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LockInfo_Requst::_Internal {
 public:
};

LockInfo_Requst::LockInfo_Requst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Lock.LockInfo_Requst)
}
LockInfo_Requst::LockInfo_Requst(const LockInfo_Requst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:myRPC.Lock.LockInfo_Requst)
}

void LockInfo_Requst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LockInfo_Requst_Lock_5fmessage_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

LockInfo_Requst::~LockInfo_Requst() {
  // @@protoc_insertion_point(destructor:myRPC.Lock.LockInfo_Requst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LockInfo_Requst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LockInfo_Requst::ArenaDtor(void* object) {
  LockInfo_Requst* _this = reinterpret_cast< LockInfo_Requst* >(object);
  (void)_this;
}
void LockInfo_Requst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LockInfo_Requst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockInfo_Requst& LockInfo_Requst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockInfo_Requst_Lock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void LockInfo_Requst::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Lock.LockInfo_Requst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LockInfo_Requst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Lock.LockInfo_Requst.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockInfo_Requst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Lock.LockInfo_Requst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Lock.LockInfo_Requst.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Lock.LockInfo_Requst)
  return target;
}

size_t LockInfo_Requst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Lock.LockInfo_Requst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockInfo_Requst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Lock.LockInfo_Requst)
  GOOGLE_DCHECK_NE(&from, this);
  const LockInfo_Requst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockInfo_Requst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Lock.LockInfo_Requst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Lock.LockInfo_Requst)
    MergeFrom(*source);
  }
}

void LockInfo_Requst::MergeFrom(const LockInfo_Requst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Lock.LockInfo_Requst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void LockInfo_Requst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Lock.LockInfo_Requst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockInfo_Requst::CopyFrom(const LockInfo_Requst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Lock.LockInfo_Requst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockInfo_Requst::IsInitialized() const {
  return true;
}

void LockInfo_Requst::InternalSwap(LockInfo_Requst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata LockInfo_Requst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class unLockInfo_Requst::_Internal {
 public:
};

unLockInfo_Requst::unLockInfo_Requst(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:myRPC.Lock.unLockInfo_Requst)
}
unLockInfo_Requst::unLockInfo_Requst(const unLockInfo_Requst& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_filename().empty()) {
    filename_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_filename(), 
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:myRPC.Lock.unLockInfo_Requst)
}

void unLockInfo_Requst::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_unLockInfo_Requst_Lock_5fmessage_2eproto.base);
  filename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

unLockInfo_Requst::~unLockInfo_Requst() {
  // @@protoc_insertion_point(destructor:myRPC.Lock.unLockInfo_Requst)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void unLockInfo_Requst::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  filename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void unLockInfo_Requst::ArenaDtor(void* object) {
  unLockInfo_Requst* _this = reinterpret_cast< unLockInfo_Requst* >(object);
  (void)_this;
}
void unLockInfo_Requst::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void unLockInfo_Requst::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const unLockInfo_Requst& unLockInfo_Requst::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_unLockInfo_Requst_Lock_5fmessage_2eproto.base);
  return *internal_default_instance();
}


void unLockInfo_Requst::Clear() {
// @@protoc_insertion_point(message_clear_start:myRPC.Lock.unLockInfo_Requst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filename_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* unLockInfo_Requst::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string filename = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_filename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "myRPC.Lock.unLockInfo_Requst.filename"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* unLockInfo_Requst::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:myRPC.Lock.unLockInfo_Requst)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_filename().data(), static_cast<int>(this->_internal_filename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "myRPC.Lock.unLockInfo_Requst.filename");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_filename(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:myRPC.Lock.unLockInfo_Requst)
  return target;
}

size_t unLockInfo_Requst::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:myRPC.Lock.unLockInfo_Requst)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string filename = 1;
  if (this->filename().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_filename());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void unLockInfo_Requst::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:myRPC.Lock.unLockInfo_Requst)
  GOOGLE_DCHECK_NE(&from, this);
  const unLockInfo_Requst* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<unLockInfo_Requst>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:myRPC.Lock.unLockInfo_Requst)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:myRPC.Lock.unLockInfo_Requst)
    MergeFrom(*source);
  }
}

void unLockInfo_Requst::MergeFrom(const unLockInfo_Requst& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:myRPC.Lock.unLockInfo_Requst)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.filename().size() > 0) {
    _internal_set_filename(from._internal_filename());
  }
}

void unLockInfo_Requst::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:myRPC.Lock.unLockInfo_Requst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void unLockInfo_Requst::CopyFrom(const unLockInfo_Requst& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:myRPC.Lock.unLockInfo_Requst)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool unLockInfo_Requst::IsInitialized() const {
  return true;
}

void unLockInfo_Requst::InternalSwap(unLockInfo_Requst* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  filename_.Swap(&other->filename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata unLockInfo_Requst::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

Lock_Server::~Lock_Server() {}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Lock_Server::descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Lock_5fmessage_2eproto);
  return file_level_service_descriptors_Lock_5fmessage_2eproto[0];
}

const ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor* Lock_Server::GetDescriptor() {
  return descriptor();
}

void Lock_Server::Lock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Lock::LockInfo_Requst*,
                         ::myRPC::Lock::Lock_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method Lock() not implemented.");
  done->Run();
}

void Lock_Server::unLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                         const ::myRPC::Lock::unLockInfo_Requst*,
                         ::myRPC::Lock::Lock_Response*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method unLock() not implemented.");
  done->Run();
}

void Lock_Server::CallMethod(const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method,
                             ::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                             const ::PROTOBUF_NAMESPACE_ID::Message* request,
                             ::PROTOBUF_NAMESPACE_ID::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), file_level_service_descriptors_Lock_5fmessage_2eproto[0]);
  switch(method->index()) {
    case 0:
      Lock(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Lock::LockInfo_Requst*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Lock::Lock_Response*>(
                 response),
             done);
      break;
    case 1:
      unLock(controller,
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ::myRPC::Lock::unLockInfo_Requst*>(
                 request),
             ::PROTOBUF_NAMESPACE_ID::internal::DownCast<::myRPC::Lock::Lock_Response*>(
                 response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Lock_Server::GetRequestPrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myRPC::Lock::LockInfo_Requst::default_instance();
    case 1:
      return ::myRPC::Lock::unLockInfo_Requst::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::PROTOBUF_NAMESPACE_ID::Message& Lock_Server::GetResponsePrototype(
    const ::PROTOBUF_NAMESPACE_ID::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::myRPC::Lock::Lock_Response::default_instance();
    case 1:
      return ::myRPC::Lock::Lock_Response::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::PROTOBUF_NAMESPACE_ID::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

Lock_Server_Stub::Lock_Server_Stub(::PROTOBUF_NAMESPACE_ID::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
Lock_Server_Stub::Lock_Server_Stub(
    ::PROTOBUF_NAMESPACE_ID::RpcChannel* channel,
    ::PROTOBUF_NAMESPACE_ID::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::PROTOBUF_NAMESPACE_ID::Service::STUB_OWNS_CHANNEL) {}
Lock_Server_Stub::~Lock_Server_Stub() {
  if (owns_channel_) delete channel_;
}

void Lock_Server_Stub::Lock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Lock::LockInfo_Requst* request,
                              ::myRPC::Lock::Lock_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void Lock_Server_Stub::unLock(::PROTOBUF_NAMESPACE_ID::RpcController* controller,
                              const ::myRPC::Lock::unLockInfo_Requst* request,
                              ::myRPC::Lock::Lock_Response* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Lock
}  // namespace myRPC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::myRPC::Lock::Lock_Response* Arena::CreateMaybeMessage< ::myRPC::Lock::Lock_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Lock::Lock_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::myRPC::Lock::LockInfo_Requst* Arena::CreateMaybeMessage< ::myRPC::Lock::LockInfo_Requst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Lock::LockInfo_Requst >(arena);
}
template<> PROTOBUF_NOINLINE ::myRPC::Lock::unLockInfo_Requst* Arena::CreateMaybeMessage< ::myRPC::Lock::unLockInfo_Requst >(Arena* arena) {
  return Arena::CreateMessageInternal< ::myRPC::Lock::unLockInfo_Requst >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
